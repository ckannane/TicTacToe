{"ast":null,"code":"var _jsxFileName = \"/goinfre/ckannane/tictac/tictac/src/components/Game/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Game.css';\nimport { ResultModal } from '../ResultModal/ResultModal';\nimport { Board } from '../Board/Board';\nimport { calculateWinner } from '../../utils/WinnerCalculator';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Game = () => {\n  _s();\n  const [cellValues, setCellValues] = useState(['', '', '', '', '', '', '', '', '']);\n  const [xIsNext, setXIsNext] = useState(true);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [numberofTurnsLeft, setNumberofTurnsLeft] = useState(9);\n  const winningCombination = [];\n  const isCellEmpty = cellIndex => cellValues[cellIndex] === '';\n  const onCellClicked = cellIndex => {\n    if (isCellEmpty(cellIndex)) {\n      const newCellValues = [...cellValues];\n      const NewNumberofTurnsLeft = numberofTurnsLeft - 1;\n      newCellValues[cellIndex] = xIsNext ? 'X' : 'O';\n      const calcResult = calculateWinner(newCellValues, cellIndex);\n      setCellValues(newCellValues);\n      setXIsNext(!xIsNext);\n      setIsGameOver(calcResult.hasResult);\n      setNumberofTurnsLeft(NewNumberofTurnsLeft);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tic Tac Toe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        cellValues: cellValues,\n        winningCombination: winningCombination,\n        cellClicked: onCellClicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(ResultModal, {\n      isGameOver: isGameOver\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Game, \"swuQCed8uxWfwLtOzTDs7FDqTaI=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","ResultModal","Board","calculateWinner","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","cellValues","setCellValues","xIsNext","setXIsNext","isGameOver","setIsGameOver","numberofTurnsLeft","setNumberofTurnsLeft","winningCombination","isCellEmpty","cellIndex","onCellClicked","newCellValues","NewNumberofTurnsLeft","calcResult","hasResult","children","id","fileName","_jsxFileName","lineNumber","columnNumber","cellClicked","_c","$RefreshReg$"],"sources":["/goinfre/ckannane/tictac/tictac/src/components/Game/Game.js"],"sourcesContent":["import React , {useState} from 'react';\nimport './Game.css';\nimport {ResultModal} from '../ResultModal/ResultModal'\nimport { Board } from '../Board/Board';\nimport { calculateWinner } from '../../utils/WinnerCalculator';\n\n\nexport const Game = () => {\n    const [cellValues, setCellValues] = useState(['','','','','','','','','']);\n    const [xIsNext, setXIsNext] = useState(true);\n    const [isGameOver,setIsGameOver] = useState(false);\n    const [numberofTurnsLeft, setNumberofTurnsLeft] = useState(9);\n\tconst winningCombination = [];\n\n    const isCellEmpty = (cellIndex) => cellValues[cellIndex] === ''\n\n    const onCellClicked = (cellIndex) =>{\n        if(isCellEmpty(cellIndex)) {\n        const newCellValues = [...cellValues];\n        \n        const NewNumberofTurnsLeft = numberofTurnsLeft -1;\n        newCellValues[cellIndex] = xIsNext ? 'X': 'O';\n\n        const calcResult = calculateWinner(newCellValues, cellIndex);\n        setCellValues(newCellValues);\n        setXIsNext(!xIsNext);\n        setIsGameOver(calcResult.hasResult);\n        setNumberofTurnsLeft(NewNumberofTurnsLeft)\n        }\n\t};\n\n  return (<>\n  <div id=\"game\">\n      <h1>Tic Tac Toe</h1>\n\t  \t<Board cellValues={cellValues}\n        winningCombination={winningCombination}\n        cellClicked={onCellClicked}\n        ></Board>\n      </div>\n      < ResultModal\n            isGameOver = {isGameOver}\n      />\n  </>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAO,OAAO;AACtC,OAAO,YAAY;AACnB,SAAQC,WAAW,QAAO,4BAA4B;AACtD,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,eAAe,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAG/D,OAAO,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC;EAC1E,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACc,UAAU,EAACC,aAAa,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAClD,MAAM,CAACgB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EAChE,MAAMkB,kBAAkB,GAAG,EAAE;EAE1B,MAAMC,WAAW,GAAIC,SAAS,IAAKV,UAAU,CAACU,SAAS,CAAC,KAAK,EAAE;EAE/D,MAAMC,aAAa,GAAID,SAAS,IAAI;IAChC,IAAGD,WAAW,CAACC,SAAS,CAAC,EAAE;MAC3B,MAAME,aAAa,GAAG,CAAC,GAAGZ,UAAU,CAAC;MAErC,MAAMa,oBAAoB,GAAGP,iBAAiB,GAAE,CAAC;MACjDM,aAAa,CAACF,SAAS,CAAC,GAAGR,OAAO,GAAG,GAAG,GAAE,GAAG;MAE7C,MAAMY,UAAU,GAAGrB,eAAe,CAACmB,aAAa,EAAEF,SAAS,CAAC;MAC5DT,aAAa,CAACW,aAAa,CAAC;MAC5BT,UAAU,CAAC,CAACD,OAAO,CAAC;MACpBG,aAAa,CAACS,UAAU,CAACC,SAAS,CAAC;MACnCR,oBAAoB,CAACM,oBAAoB,CAAC;IAC1C;EACP,CAAC;EAEA,oBAAQlB,OAAA,CAAAE,SAAA;IAAAmB,QAAA,gBACRrB,OAAA;MAAKsB,EAAE,EAAC,MAAM;MAAAD,QAAA,gBACVrB,OAAA;QAAAqB,QAAA,EAAI;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtB1B,OAAA,CAACH,KAAK;QAACQ,UAAU,EAAEA,UAAW;QAC1BQ,kBAAkB,EAAEA,kBAAmB;QACvCc,WAAW,EAAEX;MAAc;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACN1B,OAAA,CAAEJ,WAAW;MACPa,UAAU,EAAIA;IAAW;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC;EAAA,eACJ,CAAC;AAEL,CAAC;AAAAtB,EAAA,CArCYD,IAAI;AAAAyB,EAAA,GAAJzB,IAAI;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}