{"ast":null,"code":"const winningMatrix = {\n  0: [[1, 2], [3, 6], [4, 8]],\n  1: [[0, 2], [4, 7]],\n  2: [[0, 1], [5, 8], [4, 6]],\n  3: [[0, 6], [4, 5]],\n  4: [[2, 6], [3, 5], [1, 7], [0, 8]],\n  5: [[3, 4], [2, 8]],\n  6: [[7, 8], [0, 3], [2, 4]],\n  7: [[6, 8], [1, 4]],\n  8: [[6, 7], [2, 5], [0, 4]]\n};\nexport const calculateWinner = (cellValues, numberOfTurnLeft, CellIndeX) => {\n  const winningRanges = winningMatrix[CellIndeX];\n  for (let i = 0; i < winningRanges.length; i++) {\n    const currentValue = cellValues[CellIndeX];\n    const firstOption = cellValues[winningRanges[i][0]];\n    const secondOption = cellValues[winningRanges[i][1]];\n    if (currentValue === firstOption && firstOption === secondOption) {\n      return {\n        hasResult: true,\n        winner: currentValue,\n        winningCombination: [CellIndeX, winningMatrix[i][0], winningMatrix[i][0]]\n      };\n    }\n  }\n  return {\n    hasResult: false,\n    winner: undefined,\n    winningCombination: []\n  };\n};","map":{"version":3,"names":["winningMatrix","calculateWinner","cellValues","numberOfTurnLeft","CellIndeX","winningRanges","i","length","currentValue","firstOption","secondOption","hasResult","winner","winningCombination","undefined"],"sources":["/goinfre/ckannane/tictac/tictac/src/utils/WinnerCalculator.js"],"sourcesContent":["\nconst winningMatrix = {\n    0: [[1,2],[3,6],[4,8]],\n    1: [[0,2],[4,7]],\n    2: [[0,1],[5,8],[4,6]],\n    3: [[0,6],[4,5]],\n    4: [[2,6],[3,5],[1,7],[0,8]],\n    5: [[3,4],[2,8]],\n    6: [[7,8],[0,3],[2,4]],\n    7: [[6,8],[1,4]],\n    8: [[6,7],[2,5],[0,4]]\n};\n\nexport const calculateWinner = (cellValues, numberOfTurnLeft, CellIndeX) => {\n\n\tconst winningRanges = winningMatrix[CellIndeX];\n\n\tfor( let i = 0; i < winningRanges.length; i++){\n\t\tconst currentValue = cellValues[CellIndeX];\n\t\tconst firstOption = cellValues[winningRanges[i][0]];\n\t\tconst secondOption = cellValues[winningRanges[i][1]];\n\t\t\n\t\tif (currentValue === firstOption && firstOption === secondOption){\n\t\t\treturn {\n\t\t\t\thasResult : true,\n\t\t\t\twinner: currentValue,\n\t\t\t\twinningCombination: [CellIndeX,winningMatrix[i][0],winningMatrix[i][0]]\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\thasResult : false,\n\t\twinner: undefined,\n\t\twinningCombination: []\n\t}\n};"],"mappings":"AACA,MAAMA,aAAa,GAAG;EAClB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EACtB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EACtB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAC5B,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EACtB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC;AACzB,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAACC,UAAU,EAAEC,gBAAgB,EAAEC,SAAS,KAAK;EAE3E,MAAMC,aAAa,GAAGL,aAAa,CAACI,SAAS,CAAC;EAE9C,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,aAAa,CAACE,MAAM,EAAED,CAAC,EAAE,EAAC;IAC7C,MAAME,YAAY,GAAGN,UAAU,CAACE,SAAS,CAAC;IAC1C,MAAMK,WAAW,GAAGP,UAAU,CAACG,aAAa,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnD,MAAMI,YAAY,GAAGR,UAAU,CAACG,aAAa,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAEpD,IAAIE,YAAY,KAAKC,WAAW,IAAIA,WAAW,KAAKC,YAAY,EAAC;MAChE,OAAO;QACNC,SAAS,EAAG,IAAI;QAChBC,MAAM,EAAEJ,YAAY;QACpBK,kBAAkB,EAAE,CAACT,SAAS,EAACJ,aAAa,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC,EAACN,aAAa,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC;MACvE,CAAC;IACF;EACD;EACA,OAAO;IACNK,SAAS,EAAG,KAAK;IACjBC,MAAM,EAAEE,SAAS;IACjBD,kBAAkB,EAAE;EACrB,CAAC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}